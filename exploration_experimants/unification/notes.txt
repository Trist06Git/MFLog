
n(x) =                              n(x, return, return2) =
  return = f(x) = other,                return = U_0 = other,
  f(other, return2).                    f(other, return2),
                                        f(x, U_0).

n(x) =                              n(x, return, return2) =
  return = f(x) = other = g(x, 1),      return = U_0 = other = U_1,
  f(other, return2).                    f(other, return2),
                                        f(x, U_0),
                                        g(x, 1, U_1).

h(z) = f(g(z)).         h(z) = f(g(z; y, x)),
f(x, y, z) =                   g(z; y, x)
    x = 1,
    y = 2,
    z = 3.
g(x; y, z) =
    y = x,
    z = 2.
  
1: define h
    1.1: define h's expr
        1.1.1: define f ...
        1.1.2: define fc(f)'s params
            1.1.2.1: define g ...
            1.1.2.2: define fc(g)'s params
                1.1.2.2.1: define z ...
                1.1.2.2.2: match call-site vars of g
            1.1.2.3: move fc(g)
            1.1.2.4: insert fc(g)'s unbounded vars
        1.1.3: match call-site vars of f
    1.2: define h's head

h(x) =          h(x) =
    f(g(y)),        f(),
    y = 1,          g(y; r1, r2),
    x.              y = 1,
                    x.

w(a, b) =
    a = 1,
    b = 2.
h(x; r1, r2) =              h(x; r1, r2) =
    f(w(y, x); r1, r2).         f(y; r1, r2),
                                w(y, x).
h(z; r3) =
    f(r1, r2, r3),
    g(z; r1, r2).


//////////
thing(X) =
    other(X).

thing(X, R) =
    other(X, R).

where
other(X) =          other(X) =
    X + 1.              plus(X, 1).

other(X, R) =       other(X, R) =
    R = X + 1.          plus(X, 1, R).
///////////

func(X) =
    X + 1.

func(X) =
    plus(X, 1, R).
//unbound R
func(X, R) =
    plus(X, 1, R).
///////////

func(X, Y) =
    X + Y + 1.

func(X, Y) =
    plus(plus(X, Y, R1), 1, R2).

func(X, Y) =
    plus(X, Y, R1),
    plus(R1, 1, R2).
//unbound R2
func(X, Y, R2) =
    plus(X, Y, R1),
    plus(R1, 1, R2).
///////////

f(X) = 
    g(h(X)).

where
h(X; R1, R2) =
    R1 = X+1,
    R2 = X+1.
and
g(X) = X.       g(X; R) = X = R.

so
f(X) =
    h(X; R1, R2),
    g(R1, R2).

so
f(X) == true ?
or
f(X; R) == R = [true] ? == [1] ?
